package gotrax

import (
	"github.com/otrv4/ed448"
	. "gopkg.in/check.v1"
)

func (s *GotraxSuite) Test_generateSignature_generatesACorrectSignature(c *C) {
	msg := []byte("hi")
	p1 := DeriveKeypair([SymKeyLength]byte{0x0A})
	p2 := DeriveKeypair([SymKeyLength]byte{0x19})
	p3 := DeriveKeypair([SymKeyLength]byte{0x2A})
	wr := FixedRandBytes(
		// for t1
		[]byte{
			0x80, 0x53, 0x5e, 0xac, 0xf5, 0x28, 0x86, 0xe1,
			0xc3, 0x7b, 0x75, 0xd1, 0x47, 0xab, 0x7e, 0x2b,
			0xf3, 0x0c, 0xc6, 0x4f, 0x90, 0x2b, 0x8f, 0x47,
			0x41, 0x6d, 0xf6, 0x2a, 0x17, 0x96, 0x4e, 0xe7,
			0x80, 0x13, 0x04, 0x64, 0x7d, 0x8a, 0x18, 0x94,
			0x7d, 0xc8, 0x6b, 0x31, 0xce, 0x0f, 0x02, 0xa0,
			0x6c, 0x03, 0xbc, 0xa3, 0x33, 0xde, 0x7e, 0xc6,
			0x20,
		},
		// for t2
		[]byte{
			0xa5, 0xc8, 0x1e, 0xfc, 0xa7, 0x40, 0xa2, 0x85,
			0xca, 0x0d, 0x6f, 0xb5, 0x23, 0x01, 0x67, 0x8a,
			0x8e, 0x24, 0x54, 0xb3, 0x56, 0x02, 0xdd, 0xfe,
			0x97, 0xf4, 0xf2, 0x0b, 0x2e, 0xbd, 0x03, 0x36,
			0x56, 0xb5, 0xdb, 0xd5, 0xb0, 0x95, 0x99, 0x88,
			0x05, 0xe0, 0xd3, 0x41, 0x27, 0xfb, 0xb7, 0xdb,
			0xaf, 0xb7, 0x3a, 0xd1, 0x8b, 0x35, 0x58, 0x0b,
			0xe1,
		},
		// for t3
		[]byte{
			0xc5, 0x22, 0x19, 0x89, 0x3b, 0x85, 0xfc, 0xab,
			0x53, 0x81, 0x8c, 0xae, 0x6a, 0xb9, 0xfd, 0xaf,
			0x83, 0x5f, 0xd5, 0x53, 0xdb, 0xcf, 0xeb, 0x70,
			0xee, 0x69, 0xd5, 0x46, 0xaa, 0x05, 0xd3, 0xae,
			0xf9, 0x86, 0xb3, 0xc5, 0x7e, 0x9c, 0x27, 0x65,
			0xb0, 0x05, 0xc0, 0x40, 0x8d, 0x53, 0x38, 0x78,
			0xd9, 0x72, 0x96, 0xdd, 0x75, 0xae, 0x25, 0x9a,
			0x5a,
		},
		// for r1
		[]byte{
			0x2b, 0x8f, 0x55, 0x72, 0xf4, 0x93, 0xfb, 0xdd,
			0xc2, 0x92, 0x92, 0x6c, 0x2f, 0xce, 0xca, 0x29,
			0xdd, 0x09, 0xe8, 0xe4, 0xb7, 0x71, 0x47, 0x31,
			0x86, 0x86, 0x93, 0x96, 0x0d, 0x39, 0x35, 0xae,
			0x28, 0xf1, 0x61, 0xf6, 0x73, 0xf7, 0x1b, 0x2f,
			0x70, 0xf7, 0x7e, 0x6d, 0x91, 0x6e, 0xc6, 0x4a,
			0xeb, 0x6c, 0xb6, 0x3d, 0x1c, 0xc6, 0xa2, 0xca,
			0x13,
		},
		// for r2
		[]byte{
			0xa3, 0xfa, 0x04, 0xd8, 0x61, 0x3c, 0x4d, 0x16,
			0x00, 0xd0, 0x5c, 0x41, 0x51, 0xb8, 0x90, 0xe2,
			0x17, 0x19, 0xd2, 0x36, 0x69, 0x18, 0x78, 0x7b,
			0xb2, 0xd6, 0xd6, 0xe6, 0xe6, 0xac, 0x6f, 0x5e,
			0xb3, 0xb2, 0x12, 0xad, 0xa0, 0x47, 0xe1, 0x13,
			0x2a, 0x96, 0x4f, 0xda, 0x9a, 0x9e, 0x41, 0xe4,
			0x3f, 0xd9, 0x0d, 0x7d, 0xd5, 0x8a, 0xc0, 0xab,
			0x8b,
		},
		// for r3
		[]byte{
			0x69, 0x24, 0x84, 0x08, 0xf1, 0xf9, 0xa0, 0x6a,
			0x3f, 0x4f, 0x4e, 0x4a, 0x64, 0x3a, 0x99, 0x28,
			0xed, 0x9d, 0x00, 0x8e, 0xda, 0xf2, 0xa1, 0x68,
			0x93, 0x81, 0x0f, 0x68, 0x92, 0x13, 0x3b, 0x14,
			0x43, 0xc3, 0xf7, 0xf5, 0x96, 0x5b, 0x46, 0x1d,
			0x1c, 0xc5, 0x65, 0xa3, 0x09, 0x05, 0xbe, 0xd0,
			0xb4, 0xe8, 0x47, 0x87, 0x24, 0x7b, 0xd6, 0xce,
			0x07,
		},
		// for c1
		[]byte{
			0x5d, 0x99, 0x98, 0x56, 0x86, 0x17, 0x0f, 0xb9,
			0x4f, 0x85, 0x03, 0x7d, 0x5c, 0x31, 0x43, 0x64,
			0x95, 0x02, 0x73, 0xa3, 0xb1, 0xe8, 0x1d, 0xeb,
			0x0d, 0x0d, 0x74, 0x5b, 0x9c, 0x98, 0x75, 0xfd,
			0xb2, 0xde, 0x2b, 0x72, 0x8f, 0x80, 0x9e, 0xc8,
			0x49, 0x21, 0xa8, 0x18, 0x29, 0xaa, 0xa5, 0x71,
			0xda, 0x46, 0x30, 0x2d, 0x19, 0x97, 0x0d, 0xc4,
			0x7a,
		},
		// for c2
		[]byte{
			0xaa, 0x6d, 0x7a, 0xf6, 0xa0, 0x95, 0x4c, 0xb8,
			0x4c, 0x49, 0x08, 0x1b, 0xd9, 0x48, 0x2b, 0x24,
			0xf7, 0x22, 0x9f, 0x06, 0xaf, 0x33, 0xbb, 0xf2,
			0x08, 0x58, 0x6a, 0xe5, 0xb0, 0xb2, 0x29, 0x7e,
			0x3c, 0x5d, 0x6e, 0x67, 0x80, 0x2b, 0x06, 0x9f,
			0x94, 0x72, 0xbe, 0x5d, 0x53, 0xaa, 0xe6, 0xd3,
			0x39, 0x87, 0x12, 0x38, 0xf5, 0x18, 0x65, 0xd2,
			0x48,
		},
		// for c3
		[]byte{
			0x19, 0x69, 0x2f, 0xd7, 0x05, 0xd3, 0x0b, 0x1b,
			0x94, 0xaf, 0xa5, 0xba, 0xf6, 0x48, 0x2f, 0xb9,
			0x13, 0x04, 0xc1, 0xdd, 0xc7, 0xed, 0x81, 0x82,
			0x35, 0xfb, 0x67, 0xd7, 0x76, 0x37, 0x79, 0x08,
			0x75, 0x6f, 0xb2, 0x69, 0xcb, 0x1d, 0x55, 0xc8,
			0x3f, 0x32, 0x05, 0xc5, 0x27, 0xed, 0x7a, 0x97,
			0x11, 0x00, 0xe9, 0xff, 0xcc, 0x1d, 0xb1, 0xd2,
			0x0f,
		},
	)

	rsig, _ := GenerateSignature(wr, p1.Priv, p1.Pub, p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth)

	c.Assert(rsig.C1.Encode(), DeepEquals, []byte{
		0x2d, 0xd5, 0xac, 0x56, 0xf9, 0x48, 0x34, 0xa0,
		0x43, 0xf6, 0xf5, 0xca, 0xff, 0x78, 0x96, 0x26,
		0x23, 0xe2, 0x5e, 0xf5, 0xa6, 0xd0, 0x5d, 0x11,
		0x8c, 0x3f, 0xb9, 0x34, 0xac, 0x4a, 0x80, 0x81,
		0xf9, 0xbc, 0x72, 0xa8, 0xf5, 0xd4, 0x86, 0xf8,
		0xd6, 0x2e, 0x20, 0xd9, 0x2d, 0xac, 0x09, 0x9e,
		0xd0, 0x70, 0x93, 0x97, 0xb7, 0xea, 0xa2, 0x20,
	})
	c.Assert(rsig.R1.Encode(), DeepEquals, []byte{
		0xa8, 0x90, 0x0a, 0xe7, 0xf9, 0x34, 0x94, 0xe7,
		0x9d, 0xf6, 0x0e, 0xc2, 0xa8, 0xf8, 0x6c, 0x9a,
		0x73, 0xe8, 0x78, 0x80, 0xd4, 0x21, 0xaf, 0xa1,
		0x9d, 0x24, 0x6c, 0x2e, 0x7a, 0xf8, 0xed, 0xfb,
		0x93, 0x97, 0x25, 0x1f, 0xac, 0x38, 0xe1, 0x1c,
		0x76, 0x7b, 0xbb, 0x99, 0x58, 0x88, 0xa8, 0x63,
		0x21, 0x17, 0xda, 0x6a, 0xfb, 0x74, 0x69, 0x28,
	})

	c.Assert(rsig.C2.Encode(), DeepEquals, []byte{
		0x77, 0xab, 0x9a, 0x55, 0xd1, 0x74, 0x2d, 0x76,
		0x9b, 0x51, 0x13, 0x9d, 0xa6, 0x75, 0x85, 0x98,
		0x80, 0xac, 0x12, 0xca, 0x57, 0xae, 0x62, 0xdd,
		0xb7, 0x00, 0xac, 0x7a, 0xd4, 0xdd, 0x0b, 0x25,
		0xa9, 0x17, 0x5c, 0xab, 0x50, 0x3e, 0xfd, 0x39,
		0x23, 0x67, 0xd0, 0xc2, 0x41, 0x67, 0xea, 0x38,
		0x96, 0xf4, 0x91, 0x92, 0xc6, 0xf6, 0x6c, 0x26,
	})
	c.Assert(rsig.R2.Encode(), DeepEquals, []byte{
		0x14, 0x1f, 0x30, 0x68, 0x2e, 0xae, 0x7a, 0x17,
		0x25, 0xd8, 0xc5, 0x15, 0x6c, 0xc9, 0xaa, 0x79,
		0x7c, 0xef, 0x43, 0x7f, 0xf4, 0xdc, 0xc1, 0x02,
		0x8b, 0x31, 0x3c, 0x0f, 0xad, 0x3d, 0x2f, 0x2c,
		0x91, 0x9d, 0xee, 0x07, 0x5c, 0x45, 0x08, 0xa5,
		0x06, 0x51, 0x0c, 0x2d, 0x6b, 0xe6, 0xd2, 0x43,
		0x05, 0x4a, 0xc1, 0x17, 0xad, 0x14, 0xdd, 0x33,
	})
	c.Assert(rsig.C3.Encode(), DeepEquals, []byte{
		0x64, 0x8e, 0x4c, 0xc1, 0x91, 0xbd, 0x72, 0xc0,
		0x70, 0xd5, 0x82, 0xba, 0x00, 0x86, 0xa6, 0x39,
		0x8d, 0xc7, 0x95, 0x9a, 0xb3, 0x02, 0xf3, 0xfb,
		0xb0, 0x21, 0x8e, 0xc2, 0xd9, 0xd8, 0xeb, 0x5a,
		0x11, 0xd2, 0x8f, 0xb7, 0x33, 0x49, 0xe5, 0x05,
		0x54, 0xbb, 0xf9, 0x5b, 0xda, 0x19, 0x68, 0x97,
		0xb3, 0x77, 0x6c, 0xe5, 0xa8, 0x75, 0x15, 0x2c,
	})
	c.Assert(rsig.R3.Encode(), DeepEquals, []byte{
		0x53, 0x41, 0xf3, 0x67, 0xf3, 0xfa, 0xdd, 0x4b,
		0x76, 0x95, 0x6b, 0x8e, 0x8d, 0xaf, 0x34, 0x67,
		0x19, 0x33, 0xe4, 0x6d, 0x49, 0x93, 0x8d, 0xfb,
		0xeb, 0xbc, 0xb8, 0xea, 0x7d, 0x98, 0x56, 0x8a,
		0xb1, 0x0d, 0x90, 0xf3, 0x88, 0x6a, 0x40, 0x94,
		0x29, 0x9e, 0xbb, 0xaa, 0x8e, 0x2d, 0xca, 0x5a,
		0xe7, 0x46, 0xf1, 0x73, 0x62, 0xcf, 0x8b, 0x38,
	})
}

func (s *GotraxSuite) Test_verify_canVerifyASignature(c *C) {
	msg := []byte("hi")
	p1 := DeriveKeypair([SymKeyLength]byte{0x0A})
	p2 := DeriveKeypair([SymKeyLength]byte{0x19})
	p3 := DeriveKeypair([SymKeyLength]byte{0x2A})
	rsig, _ := GenerateSignature(DefaultRandom(), p1.Priv, p1.Pub, p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth)
	c.Assert(rsig.Verify(p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth), Equals, true)
	c.Assert(rsig.Verify(p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageFingerprint), Equals, false)
}

func (s *GotraxSuite) Test_verify_failsIfGivenAnotherKey(c *C) {
	msg := []byte("hi")
	p1 := DeriveKeypair([SymKeyLength]byte{0x0A})
	p2 := DeriveKeypair([SymKeyLength]byte{0x19})
	p3 := DeriveKeypair([SymKeyLength]byte{0x2A})
	p4 := DeriveKeypair([SymKeyLength]byte{0x2B})
	rsig, _ := GenerateSignature(DefaultRandom(), p1.Priv, p1.Pub, p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth)
	c.Assert(rsig.Verify(p1.Pub, p2.Pub, p4.Pub, msg, KdfPrekeyServer, usageAuth), Equals, false)
	c.Assert(rsig.Verify(p1.Pub, p4.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth), Equals, false)
	c.Assert(rsig.Verify(p4.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth), Equals, false)
}

func (s *GotraxSuite) Test_verify_failsIfGivenThePublicKeyTwice(c *C) {
	msg := []byte("hi")
	p1 := DeriveKeypair([SymKeyLength]byte{0x0A})
	p3 := DeriveKeypair([SymKeyLength]byte{0x2A})
	_, e := GenerateSignature(DefaultRandom(), p1.Priv, p1.Pub, p1.Pub, p1.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth)
	c.Assert(e, ErrorMatches, "more than one public key match the secret key")
}

func (s *GotraxSuite) Test_verify_failsIfGivenTheWrongMessage(c *C) {
	msg := []byte("hi")
	msg2 := []byte("hi2")
	p1 := DeriveKeypair([SymKeyLength]byte{0x0A})
	p2 := DeriveKeypair([SymKeyLength]byte{0x19})
	p3 := DeriveKeypair([SymKeyLength]byte{0x2A})
	rsig, _ := GenerateSignature(DefaultRandom(), p1.Priv, p1.Pub, p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth)
	c.Assert(rsig.Verify(p1.Pub, p2.Pub, p3.Pub, msg2, KdfPrekeyServer, usageAuth), Equals, false)
}

func (s *GotraxSuite) Test_verify_failsIfTheRsigIsModified(c *C) {
	msg := []byte("hi")
	p1 := DeriveKeypair([SymKeyLength]byte{0x0A})
	p2 := DeriveKeypair([SymKeyLength]byte{0x19})
	p3 := DeriveKeypair([SymKeyLength]byte{0x2A})
	rsig, _ := GenerateSignature(DefaultRandom(), p1.Priv, p1.Pub, p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth)

	org := rsig.C1.Copy()
	rsig.C1.Halve(rsig.C1)
	c.Assert(rsig.Verify(p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth), Equals, false)
	rsig.C1 = org

	org = rsig.C2.Copy()
	rsig.C2.Halve(rsig.C2)
	c.Assert(rsig.Verify(p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth), Equals, false)
	rsig.C2 = org

	org = rsig.C3.Copy()
	rsig.C3.Halve(rsig.C3)
	c.Assert(rsig.Verify(p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth), Equals, false)
	rsig.C3 = org

	org = rsig.R1.Copy()
	rsig.R1.Halve(rsig.R1)
	c.Assert(rsig.Verify(p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth), Equals, false)
	rsig.R1 = org

	org = rsig.R2.Copy()
	rsig.R2.Halve(rsig.R2)
	c.Assert(rsig.Verify(p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth), Equals, false)
	rsig.R2 = org

	org = rsig.R3.Copy()
	rsig.R3.Halve(rsig.R3)
	c.Assert(rsig.Verify(p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth), Equals, false)
}

func (s *GotraxSuite) Test_verify_Compatibility(c *C) {
	//This was copied from the Test_generateSignature_generatesACorrectSignature
	p1Priv := []byte{
		0xa1, 0x56, 0x0c, 0x5f, 0x84, 0xf5, 0x4a, 0x80, 0x7e, 0x6c, 0xa9, 0xc5,
		0xda, 0xfe, 0x37, 0xcc, 0xe1, 0xf7, 0x84, 0x50, 0x7a, 0x10, 0x68, 0x69,
		0x26, 0x4a, 0xca, 0x59, 0x7a, 0x3e, 0xec, 0xb9, 0x35, 0x42, 0x13, 0x3c,
		0xce, 0xd0, 0x21, 0x88, 0xa1, 0xec, 0x59, 0x14, 0x60, 0x4b, 0xdf, 0x84,
		0x51, 0xdf, 0x5e, 0x06, 0x1d, 0x57, 0xa4, 0x23,
	}
	p1Pub := []byte{
		0x33, 0x70, 0x3c, 0xf8, 0x0e, 0xfb, 0x20, 0x60, 0xb9, 0xf7, 0x10, 0x8b,
		0x6c, 0xa2, 0x09, 0x86, 0x6f, 0x44, 0x7b, 0x12, 0x08, 0x22, 0x0d, 0x9d,
		0x63, 0xa6, 0x6c, 0xc5, 0x5f, 0x2c, 0x1c, 0x83, 0x44, 0x7a, 0x96, 0x97,
		0x7e, 0x3a, 0x39, 0xcb, 0x22, 0xe6, 0x19, 0xbd, 0xca, 0x71, 0x7d, 0x15,
		0x02, 0x4f, 0x06, 0xfd, 0xf7, 0x8f, 0xb1, 0x06, 0x80,
	}

	p2Priv := []byte{
		0x39, 0xbf, 0x76, 0xb3, 0xc5, 0x3e, 0x36, 0xc9, 0x30, 0x51, 0xcc, 0x4c,
		0x59, 0xa3, 0x8a, 0x4d, 0x3c, 0x9, 0xfb, 0x82, 0x8d, 0x9e, 0x7a, 0xb2,
		0x2, 0xe, 0xf2, 0xa6, 0xd7, 0x4b, 0xb3, 0xa, 0xf2, 0x32, 0xc5, 0xf3,
		0xf1, 0xc8, 0x22, 0x73, 0xbe, 0x69, 0x53, 0x92, 0xfe, 0x44, 0xe3, 0xea,
		0x59, 0x63, 0x14, 0x7, 0xb9, 0xf3, 0x91, 0x36,
	}
	p2Pub := []byte{
		0xec, 0xf4, 0xc8, 0x36, 0xfb, 0x91, 0xe5, 0x64, 0x69, 0x6b, 0x40, 0xe5,
		0x3, 0x17, 0x9c, 0x51, 0x79, 0xcc, 0x43, 0xbf, 0x4a, 0x21, 0x41, 0xf0,
		0x30, 0x21, 0xb3, 0xd1, 0x98, 0xa9, 0xd8, 0x90, 0xef, 0xcb, 0x56, 0xc1,
		0x99, 0x69, 0x61, 0x25, 0xac, 0x67, 0x79, 0x34, 0x86, 0xa7, 0x3f, 0x3a,
		0x33, 0x70, 0xfb, 0xcd, 0xa, 0x52, 0x87, 0x64, 0x0,
	}

	p3Priv := []byte{
		0xdd, 0x86, 0x6d, 0x0, 0x25, 0xde, 0xf2, 0xe5, 0x3c, 0xb0, 0x2c, 0x62,
		0xf7, 0x8e, 0x6f, 0x75, 0x2f, 0x90, 0xa6, 0x26, 0x1d, 0x3f, 0x7b, 0x53,
		0x5e, 0x79, 0x65, 0x7a, 0xba, 0x8b, 0x43, 0xe8, 0xea, 0xff, 0xf6, 0x70,
		0xf4, 0xf6, 0x85, 0x8a, 0x22, 0x58, 0xd7, 0x6, 0x26, 0xb4, 0x3f, 0x69,
		0x81, 0x8e, 0xc5, 0x72, 0x7e, 0xef, 0xfb, 0x37,
	}
	p3Pub := []byte{
		0x61, 0xfa, 0x1f, 0x15, 0x35, 0x82, 0xf5, 0xf6, 0x42, 0xf2, 0x72, 0x2,
		0xe9, 0xc2, 0x57, 0x6, 0x1a, 0x7c, 0xb8, 0xc4, 0x79, 0x91, 0x74, 0xb3,
		0xa9, 0xbd, 0x87, 0xa4, 0xf3, 0xb1, 0x87, 0xf, 0x8c, 0xee, 0x9c, 0x9,
		0xdc, 0x8e, 0x8b, 0x74, 0x31, 0xe, 0x80, 0x55, 0x73, 0x9d, 0x63, 0x43,
		0x30, 0xdb, 0xb9, 0x72, 0x6d, 0x48, 0x4e, 0x27, 0x80,
	}

	var ok bool
	p1 := &Keypair{
		Priv: CreatePrivateKey(nil),
		Pub:  CreatePublicKey(nil, Ed448Key),
	}
	p2 := &Keypair{
		Priv: CreatePrivateKey(nil),
		Pub:  CreatePublicKey(nil, Ed448Key),
	}
	p3 := &Keypair{
		Priv: CreatePrivateKey(nil),
		Pub:  CreatePublicKey(nil, Ed448Key),
	}

	_, k1, ok := DeserializeScalar(p1Priv)
	c.Assert(ok, Equals, true)
	p1.Priv = CreatePrivateKey(k1)

	_, k2, ok := DeserializePoint(p1Pub)
	c.Assert(ok, Equals, true)
	p1.Pub = CreatePublicKey(k2, Ed448Key)

	_, k3, ok := DeserializeScalar(p2Priv)
	c.Assert(ok, Equals, true)
	p2.Priv = CreatePrivateKey(k3)

	_, k4, ok := DeserializePoint(p2Pub)
	c.Assert(ok, Equals, true)
	p2.Pub = CreatePublicKey(k4, Ed448Key)

	_, k5, ok := DeserializeScalar(p3Priv)
	c.Assert(ok, Equals, true)
	p3.Priv = CreatePrivateKey(k5)

	_, k6, ok := DeserializePoint(p3Pub)
	c.Assert(ok, Equals, true)
	p3.Pub = CreatePublicKey(k6, Ed448Key)

	rsig := &RingSignature{
		C1: ed448.NewScalar(),
		R1: ed448.NewScalar(),
		C2: ed448.NewScalar(),
		R2: ed448.NewScalar(),
		C3: ed448.NewScalar(),
		R3: ed448.NewScalar(),
	}
	rsig.C1.Decode([]byte{
		0xd2, 0x73, 0x41, 0x0a, 0x24, 0x6b, 0x31, 0x23,
		0x1e, 0x26, 0x80, 0x4b, 0x0f, 0x7e, 0x3e, 0xe0,
		0xc5, 0xf8, 0xa4, 0xb1, 0xec, 0x1f, 0x2b, 0x64,
		0x29, 0x69, 0x5a, 0x4a, 0x5a, 0x55, 0x38, 0x52,
		0x1a, 0x79, 0xcb, 0x78, 0x37, 0x04, 0xb2, 0xfe,
		0x4f, 0xf2, 0x36, 0xf7, 0x1f, 0xbd, 0x12, 0x31,
		0xc9, 0xf5, 0x82, 0x9d, 0x87, 0x57, 0xd7, 0x05,
	})
	rsig.R1.Decode([]byte{
		0x30, 0x2f, 0x64, 0xb9, 0x4c, 0x55, 0x9d, 0xa3,
		0x6d, 0x95, 0x82, 0x55, 0xbf, 0x39, 0x5d, 0xd6,
		0x2e, 0x39, 0x19, 0x68, 0x86, 0x49, 0x3f, 0x9c,
		0xb1, 0xaf, 0xfd, 0xe3, 0x01, 0x79, 0x29, 0x4c,
		0x33, 0x79, 0x9e, 0xf0, 0xb4, 0x84, 0x46, 0x3d,
		0xb5, 0x83, 0x89, 0xd8, 0x5f, 0xbf, 0xef, 0x0d,
		0x38, 0xe4, 0x08, 0x9f, 0xea, 0x81, 0xea, 0x2e,
	})
	rsig.C2.Decode([]byte{
		0xc8, 0xdf, 0x0a, 0x29, 0xc7, 0x81, 0xde, 0xac,
		0x1b, 0x18, 0xa0, 0x1e, 0xde, 0xfc, 0x6f, 0xeb,
		0x31, 0xf9, 0xd1, 0x7e, 0xd0, 0x4a, 0x51, 0x3f,
		0xfc, 0xda, 0x04, 0xec, 0x4e, 0x81, 0xd7, 0x27,
		0x03, 0x78, 0x41, 0xf6, 0x51, 0x79, 0x45, 0x8d,
		0xd9, 0xd6, 0x43, 0xc7, 0xf5, 0xe7, 0x37, 0x67,
		0x33, 0xac, 0x8c, 0x04, 0x2d, 0xb6, 0x4a, 0x2a,
	})
	rsig.R2.Decode([]byte{
		0x97, 0x34, 0xf5, 0x94, 0x1c, 0x86, 0x85, 0x04,
		0x48, 0xbd, 0xa6, 0x97, 0x57, 0x0d, 0x88, 0x93,
		0xfd, 0x2e, 0xab, 0x05, 0x71, 0x17, 0x98, 0x20,
		0x4e, 0x52, 0x10, 0x28, 0xeb, 0xbd, 0xfd, 0xbe,
		0x34, 0x3b, 0xf7, 0x2c, 0x65, 0x02, 0xc0, 0xd8,
		0xe0, 0x52, 0x79, 0xf7, 0x5c, 0xed, 0xaa, 0x8f,
		0xaa, 0x18, 0x8b, 0xd4, 0x70, 0xf3, 0xd9, 0x22,
	})
	rsig.C3.Decode([]byte{
		0x77, 0xad, 0x24, 0xf5, 0xe1, 0x88, 0x5c, 0x8e,
		0x17, 0x61, 0x07, 0x7e, 0x2d, 0x4a, 0x68, 0x70,
		0x0c, 0x0a, 0xdd, 0x98, 0xac, 0x17, 0xfd, 0x43,
		0x42, 0xe5, 0xa3, 0xf0, 0x1c, 0x96, 0x7a, 0xac,
		0xbb, 0x19, 0xaa, 0xc9, 0x6f, 0x58, 0x1f, 0x4d,
		0x49, 0xac, 0xa0, 0x58, 0x5e, 0x36, 0xb6, 0x68,
		0x27, 0x95, 0x43, 0x37, 0xde, 0xf0, 0xaa, 0x2d,
	})
	rsig.R3.Decode([]byte{
		0x12, 0x5d, 0xa2, 0x8a, 0xcc, 0xc4, 0x96, 0x9c,
		0x8c, 0x16, 0x5c, 0xc9, 0x22, 0xc9, 0xd1, 0x79,
		0x1d, 0x13, 0xf5, 0x23, 0x1d, 0x65, 0x40, 0x88,
		0x0d, 0x7c, 0xc2, 0xc2, 0x77, 0x26, 0x9b, 0x77,
		0xf6, 0xa0, 0x2c, 0x93, 0x40, 0x27, 0xd1, 0x9f,
		0x9b, 0xd7, 0x62, 0xce, 0xfb, 0x94, 0x10, 0xcd,
		0x6b, 0xff, 0x8d, 0xab, 0x38, 0xa2, 0x24, 0x29,
	})

	msg := []byte("hi")
	c.Assert(rsig.Verify(p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth), Equals, true)
}
