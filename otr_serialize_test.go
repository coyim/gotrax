package gotrax

import (
	"crypto/dsa"
	"time"

	. "gopkg.in/check.v1"
)

func (s *GotraxSuite) Test_ClientProfile_shouldSerializeCorrectly(c *C) {
	cp := &ClientProfile{}
	cp.InstanceTag = 0x4253112A
	cp.PublicKey = generatePublicKeyFrom([SymKeyLength]byte{0xAB, 0x42})
	cp.ForgingKey = generatePublicKeyFrom([SymKeyLength]byte{0xCD, 0x53})
	cp.ForgingKey.keyType = ForgingKey
	cp.Versions = []byte{0x04}
	cp.Expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	cp.DsaKey = nil
	cp.TransitionalSignature = nil
	cp.Sig = &EddsaSignature{
		s: [114]byte{0x15, 0x00, 0x00, 0x00, 0x12},
	}

	expected := []byte{
		0x0, 0x0, 0x0, 0x5,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f, 0x36, 0x44,
		0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17, 0x6b, 0xb8,
		0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76, 0x71, 0xf4,
		0xc6, 0x83, 0x77, 0x01, 0x45, 0x27, 0x35, 0x3c,
		0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79, 0x69, 0xa0,
		0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6, 0x44, 0x41,
		0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b, 0xf3, 0x29,
		0x00,

		// forging key
		0x00, 0x03, 0x00, 0x12,
		0x07, 0x98, 0xea, 0x0b, 0x4a, 0x8c, 0x23, 0x1d,
		0x7a, 0x5b, 0x6e, 0x13, 0x98, 0x11, 0xf1, 0x78,
		0xa5, 0x67, 0xca, 0x6c, 0x8b, 0xf9, 0xd9, 0xfb,
		0xf4, 0x5b, 0x91, 0x45, 0x2d, 0xbf, 0x3f, 0x91,
		0xae, 0xb4, 0x64, 0xb4, 0xab, 0x98, 0x3a, 0x3f,
		0x51, 0x3b, 0x62, 0xdf, 0x91, 0x82, 0x2a, 0x39,
		0x77, 0x9d, 0x9b, 0xcf, 0x02, 0x9a, 0xcc, 0x2c,
		0x80,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,
	}

	c.Assert(cp.Serialize(), DeepEquals, expected)
}

func (s *GotraxSuite) Test_ClientProfile_shouldSerializeCorrectly_withTransitionalSignature(c *C) {
	cp := &ClientProfile{}
	cp.InstanceTag = 0x4253112A
	cp.PublicKey = generatePublicKeyFrom([SymKeyLength]byte{0xAB, 0x42})
	cp.ForgingKey = generatePublicKeyFrom([SymKeyLength]byte{0xCD, 0x53})
	cp.ForgingKey.keyType = ForgingKey
	cp.Versions = []byte{0x04}
	cp.Expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	cp.DsaKey = nil
	cp.TransitionalSignature = []byte{
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x11, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x21, 0x02, 0x03, 0x54, 0x05, 0x06, 0x07, 0x08,
		0x31, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x41, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
	}

	cp.Sig = &EddsaSignature{
		s: [114]byte{0x15, 0x00, 0x00, 0x00, 0x12},
	}

	expected := []byte{
		0x0, 0x0, 0x0, 0x6,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// forging key
		0x00, 0x03, 0x00, 0x12,
		0x07, 0x98, 0xea, 0x0b, 0x4a, 0x8c, 0x23, 0x1d,
		0x7a, 0x5b, 0x6e, 0x13, 0x98, 0x11, 0xf1, 0x78,
		0xa5, 0x67, 0xca, 0x6c, 0x8b, 0xf9, 0xd9, 0xfb,
		0xf4, 0x5b, 0x91, 0x45, 0x2d, 0xbf, 0x3f, 0x91,
		0xae, 0xb4, 0x64, 0xb4, 0xab, 0x98, 0x3a, 0x3f,
		0x51, 0x3b, 0x62, 0xdf, 0x91, 0x82, 0x2a, 0x39,
		0x77, 0x9d, 0x9b, 0xcf, 0x02, 0x9a, 0xcc, 0x2c,
		0x80,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// transitional signature
		0x00, 0x07,
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x11, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x21, 0x02, 0x03, 0x54, 0x05, 0x06, 0x07, 0x08,
		0x31, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x41, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,
	}

	c.Assert(cp.Serialize(), DeepEquals, expected)
}

func (s *GotraxSuite) Test_ClientProfile_shouldSerializeWithDSAKey(c *C) {
	cp := &ClientProfile{}
	cp.InstanceTag = 0x4253112A
	cp.PublicKey = generatePublicKeyFrom([SymKeyLength]byte{0xAB, 0x42})
	cp.ForgingKey = generatePublicKeyFrom([SymKeyLength]byte{0xCD, 0x53})
	cp.ForgingKey.keyType = ForgingKey
	cp.Versions = []byte{0x04}
	cp.Expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	cp.DsaKey = &dsa.PublicKey{}
	cp.DsaKey.P = bnFromHex("00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A857")
	cp.DsaKey.Q = bnFromHex("00997BD266EF7B1F60A5C23F3A741F2AEFD07A2081")
	cp.DsaKey.G = bnFromHex("535E360E8A95EBA46A4F7DE50AD6E9B2A6DB785A66B64EB9F20338D2A3E8FB0E94725848F1AA6CC567CB83A1CC517EC806F2E92EAE71457E80B2210A189B91250779434B41FC8A8873F6DB94BEA7D177F5D59E7E114EE10A49CFD9CEF88AE43387023B672927BA74B04EB6BBB5E57597766A2F9CE3857D7ACE3E1E3BC1FC6F26")
	cp.DsaKey.Y = bnFromHex("0AC8670AD767D7A8D9D14CC1AC6744CD7D76F993B77FFD9E39DF01E5A6536EF65E775FCEF2A983E2A19BD6415500F6979715D9FD1257E1FE2B6F5E1E74B333079E7C880D39868462A93454B41877BE62E5EF0A041C2EE9C9E76BD1E12AE25D9628DECB097025DD625EF49C3258A1A3C0FF501E3DC673B76D7BABF349009B6ECF")
	cp.TransitionalSignature = nil
	cp.Sig = &EddsaSignature{
		s: [114]byte{0x15, 0x00, 0x00, 0x00, 0x12},
	}

	expected := []byte{
		0x0, 0x0, 0x0, 0x6,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// forging key
		0x00, 0x03, 0x00, 0x12,
		0x07, 0x98, 0xea, 0x0b, 0x4a, 0x8c, 0x23, 0x1d,
		0x7a, 0x5b, 0x6e, 0x13, 0x98, 0x11, 0xf1, 0x78,
		0xa5, 0x67, 0xca, 0x6c, 0x8b, 0xf9, 0xd9, 0xfb,
		0xf4, 0x5b, 0x91, 0x45, 0x2d, 0xbf, 0x3f, 0x91,
		0xae, 0xb4, 0x64, 0xb4, 0xab, 0x98, 0x3a, 0x3f,
		0x51, 0x3b, 0x62, 0xdf, 0x91, 0x82, 0x2a, 0x39,
		0x77, 0x9d, 0x9b, 0xcf, 0x02, 0x9a, 0xcc, 0x2c,
		0x80,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// dsa public key
		0x00, 0x06,

		0x00, 0x00,

		0x0, 0x0, 0x0, 0x80,
		0xfc, 0x7, 0xab, 0xcf, 0xd, 0xc9, 0x16, 0xaf,
		0xf6, 0xe9, 0xae, 0x47, 0xbe, 0xf6, 0xc, 0x7a,
		0xb9, 0xb4, 0xd6, 0xb2, 0x46, 0x9e, 0x43, 0x66,
		0x30, 0xe3, 0x6f, 0x8a, 0x48, 0x9b, 0xe8, 0x12,
		0x48, 0x6a, 0x9, 0xf3, 0xb, 0x71, 0x22, 0x45,
		0x8, 0x65, 0x49, 0x40, 0xa8, 0x35, 0x30, 0x1a,
		0xcc, 0x52, 0x5a, 0x4f, 0xf1, 0x33, 0xfc, 0x15,
		0x2c, 0xc5, 0x3d, 0xcc, 0x59, 0xd6, 0x5c, 0x30,
		0xa5, 0x4f, 0x19, 0x93, 0xfe, 0x13, 0xfe, 0x63,
		0xe5, 0x82, 0x3d, 0x4c, 0x74, 0x6d, 0xb2, 0x1b,
		0x90, 0xf9, 0xb9, 0xc0, 0xb, 0x49, 0xec, 0x74,
		0x4, 0xab, 0x1d, 0x92, 0x9b, 0xa7, 0xfb, 0xa1,
		0x2f, 0x2e, 0x45, 0xc6, 0xe0, 0xa6, 0x51, 0x68,
		0x97, 0x50, 0xe8, 0x52, 0x8a, 0xb8, 0xc0, 0x31,
		0xd3, 0x56, 0x1f, 0xec, 0xee, 0x72, 0xeb, 0xb4,
		0xa0, 0x90, 0xd4, 0x50, 0xa9, 0xb7, 0xa8, 0x57,

		0x0, 0x0, 0x0, 0x14,
		0x99, 0x7b, 0xd2, 0x66, 0xef, 0x7b, 0x1f, 0x60,
		0xa5, 0xc2, 0x3f, 0x3a, 0x74, 0x1f, 0x2a, 0xef,
		0xd0, 0x7a, 0x20, 0x81,

		0x0, 0x0, 0x0, 0x80,
		0x53, 0x5e, 0x36, 0xe, 0x8a, 0x95, 0xeb, 0xa4,
		0x6a, 0x4f, 0x7d, 0xe5, 0xa, 0xd6, 0xe9, 0xb2,
		0xa6, 0xdb, 0x78, 0x5a, 0x66, 0xb6, 0x4e, 0xb9,
		0xf2, 0x3, 0x38, 0xd2, 0xa3, 0xe8, 0xfb, 0xe,
		0x94, 0x72, 0x58, 0x48, 0xf1, 0xaa, 0x6c, 0xc5,
		0x67, 0xcb, 0x83, 0xa1, 0xcc, 0x51, 0x7e, 0xc8,
		0x6, 0xf2, 0xe9, 0x2e, 0xae, 0x71, 0x45, 0x7e,
		0x80, 0xb2, 0x21, 0xa, 0x18, 0x9b, 0x91, 0x25,
		0x7, 0x79, 0x43, 0x4b, 0x41, 0xfc, 0x8a, 0x88,
		0x73, 0xf6, 0xdb, 0x94, 0xbe, 0xa7, 0xd1, 0x77,
		0xf5, 0xd5, 0x9e, 0x7e, 0x11, 0x4e, 0xe1, 0xa,
		0x49, 0xcf, 0xd9, 0xce, 0xf8, 0x8a, 0xe4, 0x33,
		0x87, 0x2, 0x3b, 0x67, 0x29, 0x27, 0xba, 0x74,
		0xb0, 0x4e, 0xb6, 0xbb, 0xb5, 0xe5, 0x75, 0x97,
		0x76, 0x6a, 0x2f, 0x9c, 0xe3, 0x85, 0x7d, 0x7a,
		0xce, 0x3e, 0x1e, 0x3b, 0xc1, 0xfc, 0x6f, 0x26,

		0x0, 0x0, 0x0, 0x80,
		0xa, 0xc8, 0x67, 0xa, 0xd7, 0x67, 0xd7, 0xa8,
		0xd9, 0xd1, 0x4c, 0xc1, 0xac, 0x67, 0x44, 0xcd,
		0x7d, 0x76, 0xf9, 0x93, 0xb7, 0x7f, 0xfd, 0x9e,
		0x39, 0xdf, 0x1, 0xe5, 0xa6, 0x53, 0x6e, 0xf6,
		0x5e, 0x77, 0x5f, 0xce, 0xf2, 0xa9, 0x83, 0xe2,
		0xa1, 0x9b, 0xd6, 0x41, 0x55, 0x0, 0xf6, 0x97,
		0x97, 0x15, 0xd9, 0xfd, 0x12, 0x57, 0xe1, 0xfe,
		0x2b, 0x6f, 0x5e, 0x1e, 0x74, 0xb3, 0x33, 0x7,
		0x9e, 0x7c, 0x88, 0xd, 0x39, 0x86, 0x84, 0x62,
		0xa9, 0x34, 0x54, 0xb4, 0x18, 0x77, 0xbe, 0x62,
		0xe5, 0xef, 0xa, 0x4, 0x1c, 0x2e, 0xe9, 0xc9,
		0xe7, 0x6b, 0xd1, 0xe1, 0x2a, 0xe2, 0x5d, 0x96,
		0x28, 0xde, 0xcb, 0x9, 0x70, 0x25, 0xdd, 0x62,
		0x5e, 0xf4, 0x9c, 0x32, 0x58, 0xa1, 0xa3, 0xc0,
		0xff, 0x50, 0x1e, 0x3d, 0xc6, 0x73, 0xb7, 0x6d,
		0x7b, 0xab, 0xf3, 0x49, 0x0, 0x9b, 0x6e, 0xcf,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,
	}

	c.Assert(cp.Serialize(), DeepEquals, expected)
}

func (s *GotraxSuite) Test_ClientProfile_shouldSerializeWithDSAKeyAndTransitionalSignature(c *C) {
	cp := &ClientProfile{}
	cp.InstanceTag = 0x4253112A
	cp.PublicKey = generatePublicKeyFrom([SymKeyLength]byte{0xAB, 0x42})
	cp.ForgingKey = generatePublicKeyFrom([SymKeyLength]byte{0xCD, 0x53})
	cp.ForgingKey.keyType = ForgingKey
	cp.Versions = []byte{0x04}
	cp.Expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	cp.DsaKey = &dsa.PublicKey{}
	cp.DsaKey.P = bnFromHex("00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A857")
	cp.DsaKey.Q = bnFromHex("00997BD266EF7B1F60A5C23F3A741F2AEFD07A2081")
	cp.DsaKey.G = bnFromHex("535E360E8A95EBA46A4F7DE50AD6E9B2A6DB785A66B64EB9F20338D2A3E8FB0E94725848F1AA6CC567CB83A1CC517EC806F2E92EAE71457E80B2210A189B91250779434B41FC8A8873F6DB94BEA7D177F5D59E7E114EE10A49CFD9CEF88AE43387023B672927BA74B04EB6BBB5E57597766A2F9CE3857D7ACE3E1E3BC1FC6F26")
	cp.DsaKey.Y = bnFromHex("0AC8670AD767D7A8D9D14CC1AC6744CD7D76F993B77FFD9E39DF01E5A6536EF65E775FCEF2A983E2A19BD6415500F6979715D9FD1257E1FE2B6F5E1E74B333079E7C880D39868462A93454B41877BE62E5EF0A041C2EE9C9E76BD1E12AE25D9628DECB097025DD625EF49C3258A1A3C0FF501E3DC673B76D7BABF349009B6ECF")

	cp.TransitionalSignature = []byte{
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x11, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x21, 0x02, 0x03, 0x54, 0x05, 0x06, 0x07, 0x08,
		0x31, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x41, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
	}
	cp.Sig = &EddsaSignature{
		s: [114]byte{0x15, 0x00, 0x00, 0x00, 0x12},
	}

	expected := []byte{
		0x0, 0x0, 0x0, 0x7,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// forging key
		0x00, 0x03, 0x00, 0x12,
		0x07, 0x98, 0xea, 0x0b, 0x4a, 0x8c, 0x23, 0x1d,
		0x7a, 0x5b, 0x6e, 0x13, 0x98, 0x11, 0xf1, 0x78,
		0xa5, 0x67, 0xca, 0x6c, 0x8b, 0xf9, 0xd9, 0xfb,
		0xf4, 0x5b, 0x91, 0x45, 0x2d, 0xbf, 0x3f, 0x91,
		0xae, 0xb4, 0x64, 0xb4, 0xab, 0x98, 0x3a, 0x3f,
		0x51, 0x3b, 0x62, 0xdf, 0x91, 0x82, 0x2a, 0x39,
		0x77, 0x9d, 0x9b, 0xcf, 0x02, 0x9a, 0xcc, 0x2c,
		0x80,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// dsa public key
		0x00, 0x06,

		0x00, 0x00,

		0x0, 0x0, 0x0, 0x80,
		0xfc, 0x7, 0xab, 0xcf, 0xd, 0xc9, 0x16, 0xaf,
		0xf6, 0xe9, 0xae, 0x47, 0xbe, 0xf6, 0xc, 0x7a,
		0xb9, 0xb4, 0xd6, 0xb2, 0x46, 0x9e, 0x43, 0x66,
		0x30, 0xe3, 0x6f, 0x8a, 0x48, 0x9b, 0xe8, 0x12,
		0x48, 0x6a, 0x9, 0xf3, 0xb, 0x71, 0x22, 0x45,
		0x8, 0x65, 0x49, 0x40, 0xa8, 0x35, 0x30, 0x1a,
		0xcc, 0x52, 0x5a, 0x4f, 0xf1, 0x33, 0xfc, 0x15,
		0x2c, 0xc5, 0x3d, 0xcc, 0x59, 0xd6, 0x5c, 0x30,
		0xa5, 0x4f, 0x19, 0x93, 0xfe, 0x13, 0xfe, 0x63,
		0xe5, 0x82, 0x3d, 0x4c, 0x74, 0x6d, 0xb2, 0x1b,
		0x90, 0xf9, 0xb9, 0xc0, 0xb, 0x49, 0xec, 0x74,
		0x4, 0xab, 0x1d, 0x92, 0x9b, 0xa7, 0xfb, 0xa1,
		0x2f, 0x2e, 0x45, 0xc6, 0xe0, 0xa6, 0x51, 0x68,
		0x97, 0x50, 0xe8, 0x52, 0x8a, 0xb8, 0xc0, 0x31,
		0xd3, 0x56, 0x1f, 0xec, 0xee, 0x72, 0xeb, 0xb4,
		0xa0, 0x90, 0xd4, 0x50, 0xa9, 0xb7, 0xa8, 0x57,

		0x0, 0x0, 0x0, 0x14,
		0x99, 0x7b, 0xd2, 0x66, 0xef, 0x7b, 0x1f, 0x60,
		0xa5, 0xc2, 0x3f, 0x3a, 0x74, 0x1f, 0x2a, 0xef,
		0xd0, 0x7a, 0x20, 0x81,

		0x0, 0x0, 0x0, 0x80,
		0x53, 0x5e, 0x36, 0xe, 0x8a, 0x95, 0xeb, 0xa4,
		0x6a, 0x4f, 0x7d, 0xe5, 0xa, 0xd6, 0xe9, 0xb2,
		0xa6, 0xdb, 0x78, 0x5a, 0x66, 0xb6, 0x4e, 0xb9,
		0xf2, 0x3, 0x38, 0xd2, 0xa3, 0xe8, 0xfb, 0xe,
		0x94, 0x72, 0x58, 0x48, 0xf1, 0xaa, 0x6c, 0xc5,
		0x67, 0xcb, 0x83, 0xa1, 0xcc, 0x51, 0x7e, 0xc8,
		0x6, 0xf2, 0xe9, 0x2e, 0xae, 0x71, 0x45, 0x7e,
		0x80, 0xb2, 0x21, 0xa, 0x18, 0x9b, 0x91, 0x25,
		0x7, 0x79, 0x43, 0x4b, 0x41, 0xfc, 0x8a, 0x88,
		0x73, 0xf6, 0xdb, 0x94, 0xbe, 0xa7, 0xd1, 0x77,
		0xf5, 0xd5, 0x9e, 0x7e, 0x11, 0x4e, 0xe1, 0xa,
		0x49, 0xcf, 0xd9, 0xce, 0xf8, 0x8a, 0xe4, 0x33,
		0x87, 0x2, 0x3b, 0x67, 0x29, 0x27, 0xba, 0x74,
		0xb0, 0x4e, 0xb6, 0xbb, 0xb5, 0xe5, 0x75, 0x97,
		0x76, 0x6a, 0x2f, 0x9c, 0xe3, 0x85, 0x7d, 0x7a,
		0xce, 0x3e, 0x1e, 0x3b, 0xc1, 0xfc, 0x6f, 0x26,

		0x0, 0x0, 0x0, 0x80,
		0xa, 0xc8, 0x67, 0xa, 0xd7, 0x67, 0xd7, 0xa8,
		0xd9, 0xd1, 0x4c, 0xc1, 0xac, 0x67, 0x44, 0xcd,
		0x7d, 0x76, 0xf9, 0x93, 0xb7, 0x7f, 0xfd, 0x9e,
		0x39, 0xdf, 0x1, 0xe5, 0xa6, 0x53, 0x6e, 0xf6,
		0x5e, 0x77, 0x5f, 0xce, 0xf2, 0xa9, 0x83, 0xe2,
		0xa1, 0x9b, 0xd6, 0x41, 0x55, 0x0, 0xf6, 0x97,
		0x97, 0x15, 0xd9, 0xfd, 0x12, 0x57, 0xe1, 0xfe,
		0x2b, 0x6f, 0x5e, 0x1e, 0x74, 0xb3, 0x33, 0x7,
		0x9e, 0x7c, 0x88, 0xd, 0x39, 0x86, 0x84, 0x62,
		0xa9, 0x34, 0x54, 0xb4, 0x18, 0x77, 0xbe, 0x62,
		0xe5, 0xef, 0xa, 0x4, 0x1c, 0x2e, 0xe9, 0xc9,
		0xe7, 0x6b, 0xd1, 0xe1, 0x2a, 0xe2, 0x5d, 0x96,
		0x28, 0xde, 0xcb, 0x9, 0x70, 0x25, 0xdd, 0x62,
		0x5e, 0xf4, 0x9c, 0x32, 0x58, 0xa1, 0xa3, 0xc0,
		0xff, 0x50, 0x1e, 0x3d, 0xc6, 0x73, 0xb7, 0x6d,
		0x7b, 0xab, 0xf3, 0x49, 0x0, 0x9b, 0x6e, 0xcf,

		// transitional signature
		0x00, 0x07,
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x11, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x21, 0x02, 0x03, 0x54, 0x05, 0x06, 0x07, 0x08,
		0x31, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x41, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,
	}

	c.Assert(cp.Serialize(), DeepEquals, expected)
}

func (s *GotraxSuite) Test_deserializeDSAKey_shouldCorrectlyDeserialize(c *C) {
	rest, k, ok := DeserializeDSAKey([]byte{
		0x00, 0x00,

		0x0, 0x0, 0x0, 0x80,
		0xfc, 0x7, 0xab, 0xcf, 0xd, 0xc9, 0x16, 0xaf,
		0xf6, 0xe9, 0xae, 0x47, 0xbe, 0xf6, 0xc, 0x7a,
		0xb9, 0xb4, 0xd6, 0xb2, 0x46, 0x9e, 0x43, 0x66,
		0x30, 0xe3, 0x6f, 0x8a, 0x48, 0x9b, 0xe8, 0x12,
		0x48, 0x6a, 0x9, 0xf3, 0xb, 0x71, 0x22, 0x45,
		0x8, 0x65, 0x49, 0x40, 0xa8, 0x35, 0x30, 0x1a,
		0xcc, 0x52, 0x5a, 0x4f, 0xf1, 0x33, 0xfc, 0x15,
		0x2c, 0xc5, 0x3d, 0xcc, 0x59, 0xd6, 0x5c, 0x30,
		0xa5, 0x4f, 0x19, 0x93, 0xfe, 0x13, 0xfe, 0x63,
		0xe5, 0x82, 0x3d, 0x4c, 0x74, 0x6d, 0xb2, 0x1b,
		0x90, 0xf9, 0xb9, 0xc0, 0xb, 0x49, 0xec, 0x74,
		0x4, 0xab, 0x1d, 0x92, 0x9b, 0xa7, 0xfb, 0xa1,
		0x2f, 0x2e, 0x45, 0xc6, 0xe0, 0xa6, 0x51, 0x68,
		0x97, 0x50, 0xe8, 0x52, 0x8a, 0xb8, 0xc0, 0x31,
		0xd3, 0x56, 0x1f, 0xec, 0xee, 0x72, 0xeb, 0xb4,
		0xa0, 0x90, 0xd4, 0x50, 0xa9, 0xb7, 0xa8, 0x57,

		0x0, 0x0, 0x0, 0x14,
		0x99, 0x7b, 0xd2, 0x66, 0xef, 0x7b, 0x1f, 0x60,
		0xa5, 0xc2, 0x3f, 0x3a, 0x74, 0x1f, 0x2a, 0xef,
		0xd0, 0x7a, 0x20, 0x81,

		0x0, 0x0, 0x0, 0x80,
		0x53, 0x5e, 0x36, 0xe, 0x8a, 0x95, 0xeb, 0xa4,
		0x6a, 0x4f, 0x7d, 0xe5, 0xa, 0xd6, 0xe9, 0xb2,
		0xa6, 0xdb, 0x78, 0x5a, 0x66, 0xb6, 0x4e, 0xb9,
		0xf2, 0x3, 0x38, 0xd2, 0xa3, 0xe8, 0xfb, 0xe,
		0x94, 0x72, 0x58, 0x48, 0xf1, 0xaa, 0x6c, 0xc5,
		0x67, 0xcb, 0x83, 0xa1, 0xcc, 0x51, 0x7e, 0xc8,
		0x6, 0xf2, 0xe9, 0x2e, 0xae, 0x71, 0x45, 0x7e,
		0x80, 0xb2, 0x21, 0xa, 0x18, 0x9b, 0x91, 0x25,
		0x7, 0x79, 0x43, 0x4b, 0x41, 0xfc, 0x8a, 0x88,
		0x73, 0xf6, 0xdb, 0x94, 0xbe, 0xa7, 0xd1, 0x77,
		0xf5, 0xd5, 0x9e, 0x7e, 0x11, 0x4e, 0xe1, 0xa,
		0x49, 0xcf, 0xd9, 0xce, 0xf8, 0x8a, 0xe4, 0x33,
		0x87, 0x2, 0x3b, 0x67, 0x29, 0x27, 0xba, 0x74,
		0xb0, 0x4e, 0xb6, 0xbb, 0xb5, 0xe5, 0x75, 0x97,
		0x76, 0x6a, 0x2f, 0x9c, 0xe3, 0x85, 0x7d, 0x7a,
		0xce, 0x3e, 0x1e, 0x3b, 0xc1, 0xfc, 0x6f, 0x26,

		0x0, 0x0, 0x0, 0x80,
		0xa, 0xc8, 0x67, 0xa, 0xd7, 0x67, 0xd7, 0xa8,
		0xd9, 0xd1, 0x4c, 0xc1, 0xac, 0x67, 0x44, 0xcd,
		0x7d, 0x76, 0xf9, 0x93, 0xb7, 0x7f, 0xfd, 0x9e,
		0x39, 0xdf, 0x1, 0xe5, 0xa6, 0x53, 0x6e, 0xf6,
		0x5e, 0x77, 0x5f, 0xce, 0xf2, 0xa9, 0x83, 0xe2,
		0xa1, 0x9b, 0xd6, 0x41, 0x55, 0x0, 0xf6, 0x97,
		0x97, 0x15, 0xd9, 0xfd, 0x12, 0x57, 0xe1, 0xfe,
		0x2b, 0x6f, 0x5e, 0x1e, 0x74, 0xb3, 0x33, 0x7,
		0x9e, 0x7c, 0x88, 0xd, 0x39, 0x86, 0x84, 0x62,
		0xa9, 0x34, 0x54, 0xb4, 0x18, 0x77, 0xbe, 0x62,
		0xe5, 0xef, 0xa, 0x4, 0x1c, 0x2e, 0xe9, 0xc9,
		0xe7, 0x6b, 0xd1, 0xe1, 0x2a, 0xe2, 0x5d, 0x96,
		0x28, 0xde, 0xcb, 0x9, 0x70, 0x25, 0xdd, 0x62,
		0x5e, 0xf4, 0x9c, 0x32, 0x58, 0xa1, 0xa3, 0xc0,
		0xff, 0x50, 0x1e, 0x3d, 0xc6, 0x73, 0xb7, 0x6d,
		0x7b, 0xab, 0xf3, 0x49, 0x0, 0x9b, 0x6e, 0xcf,
	})

	c.Assert(ok, Equals, true)
	c.Assert(rest, DeepEquals, []byte{})
	c.Assert(k.P, DeepEquals, bnFromHex("00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A857"))
	c.Assert(k.Q, DeepEquals, bnFromHex("00997BD266EF7B1F60A5C23F3A741F2AEFD07A2081"))
	c.Assert(k.G, DeepEquals, bnFromHex("535E360E8A95EBA46A4F7DE50AD6E9B2A6DB785A66B64EB9F20338D2A3E8FB0E94725848F1AA6CC567CB83A1CC517EC806F2E92EAE71457E80B2210A189B91250779434B41FC8A8873F6DB94BEA7D177F5D59E7E114EE10A49CFD9CEF88AE43387023B672927BA74B04EB6BBB5E57597766A2F9CE3857D7ACE3E1E3BC1FC6F26"))
	c.Assert(k.Y, DeepEquals, bnFromHex("0AC8670AD767D7A8D9D14CC1AC6744CD7D76F993B77FFD9E39DF01E5A6536EF65E775FCEF2A983E2A19BD6415500F6979715D9FD1257E1FE2B6F5E1E74B333079E7C880D39868462A93454B41877BE62E5EF0A041C2EE9C9E76BD1E12AE25D9628DECB097025DD625EF49C3258A1A3C0FF501E3DC673B76D7BABF349009B6ECF"))

}

func (s *GotraxSuite) Test_deserializeDSAKey_shouldFailOnWrongKeytype(c *C) {
	_, _, ok := DeserializeDSAKey([]byte{
		0x00, 0x01,

		0x0, 0x0, 0x0, 0x80,
		0xfc, 0x7, 0xab, 0xcf, 0xd, 0xc9, 0x16, 0xaf,
		0xf6, 0xe9, 0xae, 0x47, 0xbe, 0xf6, 0xc, 0x7a,
		0xb9, 0xb4, 0xd6, 0xb2, 0x46, 0x9e, 0x43, 0x66,
		0x30, 0xe3, 0x6f, 0x8a, 0x48, 0x9b, 0xe8, 0x12,
		0x48, 0x6a, 0x9, 0xf3, 0xb, 0x71, 0x22, 0x45,
		0x8, 0x65, 0x49, 0x40, 0xa8, 0x35, 0x30, 0x1a,
		0xcc, 0x52, 0x5a, 0x4f, 0xf1, 0x33, 0xfc, 0x15,
		0x2c, 0xc5, 0x3d, 0xcc, 0x59, 0xd6, 0x5c, 0x30,
		0xa5, 0x4f, 0x19, 0x93, 0xfe, 0x13, 0xfe, 0x63,
		0xe5, 0x82, 0x3d, 0x4c, 0x74, 0x6d, 0xb2, 0x1b,
		0x90, 0xf9, 0xb9, 0xc0, 0xb, 0x49, 0xec, 0x74,
		0x4, 0xab, 0x1d, 0x92, 0x9b, 0xa7, 0xfb, 0xa1,
		0x2f, 0x2e, 0x45, 0xc6, 0xe0, 0xa6, 0x51, 0x68,
		0x97, 0x50, 0xe8, 0x52, 0x8a, 0xb8, 0xc0, 0x31,
		0xd3, 0x56, 0x1f, 0xec, 0xee, 0x72, 0xeb, 0xb4,
		0xa0, 0x90, 0xd4, 0x50, 0xa9, 0xb7, 0xa8, 0x57,

		0x0, 0x0, 0x0, 0x14,
		0x99, 0x7b, 0xd2, 0x66, 0xef, 0x7b, 0x1f, 0x60,
		0xa5, 0xc2, 0x3f, 0x3a, 0x74, 0x1f, 0x2a, 0xef,
		0xd0, 0x7a, 0x20, 0x81,

		0x0, 0x0, 0x0, 0x80,
		0x53, 0x5e, 0x36, 0xe, 0x8a, 0x95, 0xeb, 0xa4,
		0x6a, 0x4f, 0x7d, 0xe5, 0xa, 0xd6, 0xe9, 0xb2,
		0xa6, 0xdb, 0x78, 0x5a, 0x66, 0xb6, 0x4e, 0xb9,
		0xf2, 0x3, 0x38, 0xd2, 0xa3, 0xe8, 0xfb, 0xe,
		0x94, 0x72, 0x58, 0x48, 0xf1, 0xaa, 0x6c, 0xc5,
		0x67, 0xcb, 0x83, 0xa1, 0xcc, 0x51, 0x7e, 0xc8,
		0x6, 0xf2, 0xe9, 0x2e, 0xae, 0x71, 0x45, 0x7e,
		0x80, 0xb2, 0x21, 0xa, 0x18, 0x9b, 0x91, 0x25,
		0x7, 0x79, 0x43, 0x4b, 0x41, 0xfc, 0x8a, 0x88,
		0x73, 0xf6, 0xdb, 0x94, 0xbe, 0xa7, 0xd1, 0x77,
		0xf5, 0xd5, 0x9e, 0x7e, 0x11, 0x4e, 0xe1, 0xa,
		0x49, 0xcf, 0xd9, 0xce, 0xf8, 0x8a, 0xe4, 0x33,
		0x87, 0x2, 0x3b, 0x67, 0x29, 0x27, 0xba, 0x74,
		0xb0, 0x4e, 0xb6, 0xbb, 0xb5, 0xe5, 0x75, 0x97,
		0x76, 0x6a, 0x2f, 0x9c, 0xe3, 0x85, 0x7d, 0x7a,
		0xce, 0x3e, 0x1e, 0x3b, 0xc1, 0xfc, 0x6f, 0x26,

		0x0, 0x0, 0x0, 0x80,
		0xa, 0xc8, 0x67, 0xa, 0xd7, 0x67, 0xd7, 0xa8,
		0xd9, 0xd1, 0x4c, 0xc1, 0xac, 0x67, 0x44, 0xcd,
		0x7d, 0x76, 0xf9, 0x93, 0xb7, 0x7f, 0xfd, 0x9e,
		0x39, 0xdf, 0x1, 0xe5, 0xa6, 0x53, 0x6e, 0xf6,
		0x5e, 0x77, 0x5f, 0xce, 0xf2, 0xa9, 0x83, 0xe2,
		0xa1, 0x9b, 0xd6, 0x41, 0x55, 0x0, 0xf6, 0x97,
		0x97, 0x15, 0xd9, 0xfd, 0x12, 0x57, 0xe1, 0xfe,
		0x2b, 0x6f, 0x5e, 0x1e, 0x74, 0xb3, 0x33, 0x7,
		0x9e, 0x7c, 0x88, 0xd, 0x39, 0x86, 0x84, 0x62,
		0xa9, 0x34, 0x54, 0xb4, 0x18, 0x77, 0xbe, 0x62,
		0xe5, 0xef, 0xa, 0x4, 0x1c, 0x2e, 0xe9, 0xc9,
		0xe7, 0x6b, 0xd1, 0xe1, 0x2a, 0xe2, 0x5d, 0x96,
		0x28, 0xde, 0xcb, 0x9, 0x70, 0x25, 0xdd, 0x62,
		0x5e, 0xf4, 0x9c, 0x32, 0x58, 0xa1, 0xa3, 0xc0,
		0xff, 0x50, 0x1e, 0x3d, 0xc6, 0x73, 0xb7, 0x6d,
		0x7b, 0xab, 0xf3, 0x49, 0x0, 0x9b, 0x6e, 0xcf,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_deserializeDSAKey_shouldFailOnTooShortInput(c *C) {
	_, _, ok := DeserializeDSAKey([]byte{
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_deserializeDSAKey_shouldFailOnMalformedP(c *C) {
	_, _, ok := DeserializeDSAKey([]byte{
		0x00, 0x00,

		0x0, 0x0, 0x0, 0x80,
		0xfc, 0x7, 0xab, 0xcf, 0xd, 0xc9, 0x16, 0xaf,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_deserializeDSAKey_shouldFailOnMalformedQ(c *C) {
	_, _, ok := DeserializeDSAKey([]byte{
		0x00, 0x00,

		0x0, 0x0, 0x0, 0x80,
		0xfc, 0x7, 0xab, 0xcf, 0xd, 0xc9, 0x16, 0xaf,
		0xf6, 0xe9, 0xae, 0x47, 0xbe, 0xf6, 0xc, 0x7a,
		0xb9, 0xb4, 0xd6, 0xb2, 0x46, 0x9e, 0x43, 0x66,
		0x30, 0xe3, 0x6f, 0x8a, 0x48, 0x9b, 0xe8, 0x12,
		0x48, 0x6a, 0x9, 0xf3, 0xb, 0x71, 0x22, 0x45,
		0x8, 0x65, 0x49, 0x40, 0xa8, 0x35, 0x30, 0x1a,
		0xcc, 0x52, 0x5a, 0x4f, 0xf1, 0x33, 0xfc, 0x15,
		0x2c, 0xc5, 0x3d, 0xcc, 0x59, 0xd6, 0x5c, 0x30,
		0xa5, 0x4f, 0x19, 0x93, 0xfe, 0x13, 0xfe, 0x63,
		0xe5, 0x82, 0x3d, 0x4c, 0x74, 0x6d, 0xb2, 0x1b,
		0x90, 0xf9, 0xb9, 0xc0, 0xb, 0x49, 0xec, 0x74,
		0x4, 0xab, 0x1d, 0x92, 0x9b, 0xa7, 0xfb, 0xa1,
		0x2f, 0x2e, 0x45, 0xc6, 0xe0, 0xa6, 0x51, 0x68,
		0x97, 0x50, 0xe8, 0x52, 0x8a, 0xb8, 0xc0, 0x31,
		0xd3, 0x56, 0x1f, 0xec, 0xee, 0x72, 0xeb, 0xb4,
		0xa0, 0x90, 0xd4, 0x50, 0xa9, 0xb7, 0xa8, 0x57,

		0x0, 0x0, 0x0, 0x80,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_deserializeDSAKey_shouldFailOnMalformedG(c *C) {
	_, _, ok := DeserializeDSAKey([]byte{
		0x00, 0x00,

		0x0, 0x0, 0x0, 0x80,
		0xfc, 0x7, 0xab, 0xcf, 0xd, 0xc9, 0x16, 0xaf,
		0xf6, 0xe9, 0xae, 0x47, 0xbe, 0xf6, 0xc, 0x7a,
		0xb9, 0xb4, 0xd6, 0xb2, 0x46, 0x9e, 0x43, 0x66,
		0x30, 0xe3, 0x6f, 0x8a, 0x48, 0x9b, 0xe8, 0x12,
		0x48, 0x6a, 0x9, 0xf3, 0xb, 0x71, 0x22, 0x45,
		0x8, 0x65, 0x49, 0x40, 0xa8, 0x35, 0x30, 0x1a,
		0xcc, 0x52, 0x5a, 0x4f, 0xf1, 0x33, 0xfc, 0x15,
		0x2c, 0xc5, 0x3d, 0xcc, 0x59, 0xd6, 0x5c, 0x30,
		0xa5, 0x4f, 0x19, 0x93, 0xfe, 0x13, 0xfe, 0x63,
		0xe5, 0x82, 0x3d, 0x4c, 0x74, 0x6d, 0xb2, 0x1b,
		0x90, 0xf9, 0xb9, 0xc0, 0xb, 0x49, 0xec, 0x74,
		0x4, 0xab, 0x1d, 0x92, 0x9b, 0xa7, 0xfb, 0xa1,
		0x2f, 0x2e, 0x45, 0xc6, 0xe0, 0xa6, 0x51, 0x68,
		0x97, 0x50, 0xe8, 0x52, 0x8a, 0xb8, 0xc0, 0x31,
		0xd3, 0x56, 0x1f, 0xec, 0xee, 0x72, 0xeb, 0xb4,
		0xa0, 0x90, 0xd4, 0x50, 0xa9, 0xb7, 0xa8, 0x57,

		0x0, 0x0, 0x0, 0x14,
		0x99, 0x7b, 0xd2, 0x66, 0xef, 0x7b, 0x1f, 0x60,
		0xa5, 0xc2, 0x3f, 0x3a, 0x74, 0x1f, 0x2a, 0xef,
		0xd0, 0x7a, 0x20, 0x81,

		0x0, 0x0, 0x0, 0x80,
		0x53, 0x5e, 0x36, 0xe, 0x8a, 0x95, 0xeb, 0xa4,
		0x6a, 0x4f, 0x7d, 0xe5, 0xa, 0xd6, 0xe9, 0xb2,
		0xa6, 0xdb, 0x78, 0x5a, 0x66, 0xb6, 0x4e, 0xb9,
		0xf2, 0x3, 0x38, 0xd2, 0xa3, 0xe8, 0xfb, 0xe,
		0x94, 0x72, 0x58, 0x48, 0xf1, 0xaa, 0x6c, 0xc5,
		0x67, 0xcb, 0x83, 0xa1, 0xcc, 0x51, 0x7e, 0xc8,
		0x6, 0xf2, 0xe9, 0x2e, 0xae, 0x71, 0x45, 0x7e,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_deserializeDSAKey_shouldFailOnMalformedY(c *C) {
	_, _, ok := DeserializeDSAKey([]byte{
		0x00, 0x00,

		0x0, 0x0, 0x0, 0x80,
		0xfc, 0x7, 0xab, 0xcf, 0xd, 0xc9, 0x16, 0xaf,
		0xf6, 0xe9, 0xae, 0x47, 0xbe, 0xf6, 0xc, 0x7a,
		0xb9, 0xb4, 0xd6, 0xb2, 0x46, 0x9e, 0x43, 0x66,
		0x30, 0xe3, 0x6f, 0x8a, 0x48, 0x9b, 0xe8, 0x12,
		0x48, 0x6a, 0x9, 0xf3, 0xb, 0x71, 0x22, 0x45,
		0x8, 0x65, 0x49, 0x40, 0xa8, 0x35, 0x30, 0x1a,
		0xcc, 0x52, 0x5a, 0x4f, 0xf1, 0x33, 0xfc, 0x15,
		0x2c, 0xc5, 0x3d, 0xcc, 0x59, 0xd6, 0x5c, 0x30,
		0xa5, 0x4f, 0x19, 0x93, 0xfe, 0x13, 0xfe, 0x63,
		0xe5, 0x82, 0x3d, 0x4c, 0x74, 0x6d, 0xb2, 0x1b,
		0x90, 0xf9, 0xb9, 0xc0, 0xb, 0x49, 0xec, 0x74,
		0x4, 0xab, 0x1d, 0x92, 0x9b, 0xa7, 0xfb, 0xa1,
		0x2f, 0x2e, 0x45, 0xc6, 0xe0, 0xa6, 0x51, 0x68,
		0x97, 0x50, 0xe8, 0x52, 0x8a, 0xb8, 0xc0, 0x31,
		0xd3, 0x56, 0x1f, 0xec, 0xee, 0x72, 0xeb, 0xb4,
		0xa0, 0x90, 0xd4, 0x50, 0xa9, 0xb7, 0xa8, 0x57,

		0x0, 0x0, 0x0, 0x14,
		0x99, 0x7b, 0xd2, 0x66, 0xef, 0x7b, 0x1f, 0x60,
		0xa5, 0xc2, 0x3f, 0x3a, 0x74, 0x1f, 0x2a, 0xef,
		0xd0, 0x7a, 0x20, 0x81,

		0x0, 0x0, 0x0, 0x80,
		0x53, 0x5e, 0x36, 0xe, 0x8a, 0x95, 0xeb, 0xa4,
		0x6a, 0x4f, 0x7d, 0xe5, 0xa, 0xd6, 0xe9, 0xb2,
		0xa6, 0xdb, 0x78, 0x5a, 0x66, 0xb6, 0x4e, 0xb9,
		0xf2, 0x3, 0x38, 0xd2, 0xa3, 0xe8, 0xfb, 0xe,
		0x94, 0x72, 0x58, 0x48, 0xf1, 0xaa, 0x6c, 0xc5,
		0x67, 0xcb, 0x83, 0xa1, 0xcc, 0x51, 0x7e, 0xc8,
		0x6, 0xf2, 0xe9, 0x2e, 0xae, 0x71, 0x45, 0x7e,
		0x80, 0xb2, 0x21, 0xa, 0x18, 0x9b, 0x91, 0x25,
		0x7, 0x79, 0x43, 0x4b, 0x41, 0xfc, 0x8a, 0x88,
		0x73, 0xf6, 0xdb, 0x94, 0xbe, 0xa7, 0xd1, 0x77,
		0xf5, 0xd5, 0x9e, 0x7e, 0x11, 0x4e, 0xe1, 0xa,
		0x49, 0xcf, 0xd9, 0xce, 0xf8, 0x8a, 0xe4, 0x33,
		0x87, 0x2, 0x3b, 0x67, 0x29, 0x27, 0xba, 0x74,
		0xb0, 0x4e, 0xb6, 0xbb, 0xb5, 0xe5, 0x75, 0x97,
		0x76, 0x6a, 0x2f, 0x9c, 0xe3, 0x85, 0x7d, 0x7a,
		0xce, 0x3e, 0x1e, 0x3b, 0xc1, 0xfc, 0x6f, 0x26,

		0x0, 0x0, 0x0, 0x80,
		0xa, 0xc8, 0x67, 0xa, 0xd7, 0x67, 0xd7, 0xa8,
		0xd9, 0xd1, 0x4c, 0xc1, 0xac, 0x67, 0x44, 0xcd,
		0x7d, 0x76, 0xf9, 0x93, 0xb7, 0x7f, 0xfd, 0x9e,
		0x39, 0xdf, 0x1, 0xe5, 0xa6, 0x53, 0x6e, 0xf6,
		0x5e, 0x77, 0x5f, 0xce, 0xf2, 0xa9, 0x83, 0xe2,
		0xa1, 0x9b, 0xd6, 0x41, 0x55, 0x0, 0xf6, 0x97,
		0x97, 0x15, 0xd9, 0xfd, 0x12, 0x57, 0xe1, 0xfe,
		0x2b, 0x6f, 0x5e, 0x1e, 0x74, 0xb3, 0x33, 0x7,
		0x9e, 0x7c, 0x88, 0xd, 0x39, 0x86, 0x84, 0x62,
		0xa9, 0x34, 0x54, 0xb4, 0x18, 0x77, 0xbe, 0x62,
		0xe5, 0xef, 0xa, 0x4, 0x1c, 0x2e, 0xe9, 0xc9,
		0xe7, 0x6b, 0xd1, 0xe1, 0x2a, 0xe2, 0x5d, 0x96,
		0x28, 0xde, 0xcb, 0x9, 0x70, 0x25, 0xdd, 0x62,
		0x5e, 0xf4, 0x9c, 0x32, 0x58, 0xa1, 0xa3, 0xc0,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_clientProfile_shouldDeserializeCorrectly(c *C) {
	m := &ClientProfile{}
	_, ok := m.Deserialize([]byte{
		0x0, 0x0, 0x0, 0x7,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// forging key
		0x00, 0x03, 0x00, 0x12,
		0x07, 0x98, 0xea, 0x0b, 0x4a, 0x8c, 0x23, 0x1d,
		0x7a, 0x5b, 0x6e, 0x13, 0x98, 0x11, 0xf1, 0x78,
		0xa5, 0x67, 0xca, 0x6c, 0x8b, 0xf9, 0xd9, 0xfb,
		0xf4, 0x5b, 0x91, 0x45, 0x2d, 0xbf, 0x3f, 0x91,
		0xae, 0xb4, 0x64, 0xb4, 0xab, 0x98, 0x3a, 0x3f,
		0x51, 0x3b, 0x62, 0xdf, 0x91, 0x82, 0x2a, 0x39,
		0x77, 0x9d, 0x9b, 0xcf, 0x02, 0x9a, 0xcc, 0x2c,
		0x80,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// dsa public key
		0x00, 0x06,

		0x00, 0x00,

		0x0, 0x0, 0x0, 0x80,
		0xfc, 0x7, 0xab, 0xcf, 0xd, 0xc9, 0x16, 0xaf,
		0xf6, 0xe9, 0xae, 0x47, 0xbe, 0xf6, 0xc, 0x7a,
		0xb9, 0xb4, 0xd6, 0xb2, 0x46, 0x9e, 0x43, 0x66,
		0x30, 0xe3, 0x6f, 0x8a, 0x48, 0x9b, 0xe8, 0x12,
		0x48, 0x6a, 0x9, 0xf3, 0xb, 0x71, 0x22, 0x45,
		0x8, 0x65, 0x49, 0x40, 0xa8, 0x35, 0x30, 0x1a,
		0xcc, 0x52, 0x5a, 0x4f, 0xf1, 0x33, 0xfc, 0x15,
		0x2c, 0xc5, 0x3d, 0xcc, 0x59, 0xd6, 0x5c, 0x30,
		0xa5, 0x4f, 0x19, 0x93, 0xfe, 0x13, 0xfe, 0x63,
		0xe5, 0x82, 0x3d, 0x4c, 0x74, 0x6d, 0xb2, 0x1b,
		0x90, 0xf9, 0xb9, 0xc0, 0xb, 0x49, 0xec, 0x74,
		0x4, 0xab, 0x1d, 0x92, 0x9b, 0xa7, 0xfb, 0xa1,
		0x2f, 0x2e, 0x45, 0xc6, 0xe0, 0xa6, 0x51, 0x68,
		0x97, 0x50, 0xe8, 0x52, 0x8a, 0xb8, 0xc0, 0x31,
		0xd3, 0x56, 0x1f, 0xec, 0xee, 0x72, 0xeb, 0xb4,
		0xa0, 0x90, 0xd4, 0x50, 0xa9, 0xb7, 0xa8, 0x57,

		0x0, 0x0, 0x0, 0x14,
		0x99, 0x7b, 0xd2, 0x66, 0xef, 0x7b, 0x1f, 0x60,
		0xa5, 0xc2, 0x3f, 0x3a, 0x74, 0x1f, 0x2a, 0xef,
		0xd0, 0x7a, 0x20, 0x81,

		0x0, 0x0, 0x0, 0x80,
		0x53, 0x5e, 0x36, 0xe, 0x8a, 0x95, 0xeb, 0xa4,
		0x6a, 0x4f, 0x7d, 0xe5, 0xa, 0xd6, 0xe9, 0xb2,
		0xa6, 0xdb, 0x78, 0x5a, 0x66, 0xb6, 0x4e, 0xb9,
		0xf2, 0x3, 0x38, 0xd2, 0xa3, 0xe8, 0xfb, 0xe,
		0x94, 0x72, 0x58, 0x48, 0xf1, 0xaa, 0x6c, 0xc5,
		0x67, 0xcb, 0x83, 0xa1, 0xcc, 0x51, 0x7e, 0xc8,
		0x6, 0xf2, 0xe9, 0x2e, 0xae, 0x71, 0x45, 0x7e,
		0x80, 0xb2, 0x21, 0xa, 0x18, 0x9b, 0x91, 0x25,
		0x7, 0x79, 0x43, 0x4b, 0x41, 0xfc, 0x8a, 0x88,
		0x73, 0xf6, 0xdb, 0x94, 0xbe, 0xa7, 0xd1, 0x77,
		0xf5, 0xd5, 0x9e, 0x7e, 0x11, 0x4e, 0xe1, 0xa,
		0x49, 0xcf, 0xd9, 0xce, 0xf8, 0x8a, 0xe4, 0x33,
		0x87, 0x2, 0x3b, 0x67, 0x29, 0x27, 0xba, 0x74,
		0xb0, 0x4e, 0xb6, 0xbb, 0xb5, 0xe5, 0x75, 0x97,
		0x76, 0x6a, 0x2f, 0x9c, 0xe3, 0x85, 0x7d, 0x7a,
		0xce, 0x3e, 0x1e, 0x3b, 0xc1, 0xfc, 0x6f, 0x26,

		0x0, 0x0, 0x0, 0x80,
		0xa, 0xc8, 0x67, 0xa, 0xd7, 0x67, 0xd7, 0xa8,
		0xd9, 0xd1, 0x4c, 0xc1, 0xac, 0x67, 0x44, 0xcd,
		0x7d, 0x76, 0xf9, 0x93, 0xb7, 0x7f, 0xfd, 0x9e,
		0x39, 0xdf, 0x1, 0xe5, 0xa6, 0x53, 0x6e, 0xf6,
		0x5e, 0x77, 0x5f, 0xce, 0xf2, 0xa9, 0x83, 0xe2,
		0xa1, 0x9b, 0xd6, 0x41, 0x55, 0x0, 0xf6, 0x97,
		0x97, 0x15, 0xd9, 0xfd, 0x12, 0x57, 0xe1, 0xfe,
		0x2b, 0x6f, 0x5e, 0x1e, 0x74, 0xb3, 0x33, 0x7,
		0x9e, 0x7c, 0x88, 0xd, 0x39, 0x86, 0x84, 0x62,
		0xa9, 0x34, 0x54, 0xb4, 0x18, 0x77, 0xbe, 0x62,
		0xe5, 0xef, 0xa, 0x4, 0x1c, 0x2e, 0xe9, 0xc9,
		0xe7, 0x6b, 0xd1, 0xe1, 0x2a, 0xe2, 0x5d, 0x96,
		0x28, 0xde, 0xcb, 0x9, 0x70, 0x25, 0xdd, 0x62,
		0x5e, 0xf4, 0x9c, 0x32, 0x58, 0xa1, 0xa3, 0xc0,
		0xff, 0x50, 0x1e, 0x3d, 0xc6, 0x73, 0xb7, 0x6d,
		0x7b, 0xab, 0xf3, 0x49, 0x0, 0x9b, 0x6e, 0xcf,

		// transitional signature
		0x00, 0x07,
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x11, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x21, 0x02, 0x03, 0x54, 0x05, 0x06, 0x07, 0x08,
		0x31, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x41, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.InstanceTag, Equals, uint32(0x4253112A))
	c.Assert(m.PublicKey.k.Equals(generatePublicKeyFrom([SymKeyLength]byte{0xAB, 0x42}).k), Equals, true)
	c.Assert(m.ForgingKey.keyType, Equals, ForgingKey)
	c.Assert(m.ForgingKey.k.Equals(generatePublicKeyFrom([SymKeyLength]byte{0xCD, 0x53}).k), Equals, true)
	c.Assert(m.Versions, DeepEquals, []byte{0x04})
	c.Assert(m.Expiration, Equals, time.Date(2034, 11, 5, 13, 46, 00, 00, time.UTC))
	c.Assert(m.DsaKey, Not(IsNil))
	c.Assert(m.DsaKey.P, DeepEquals, bnFromHex("00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A857"))
	c.Assert(m.DsaKey.Q, DeepEquals, bnFromHex("00997BD266EF7B1F60A5C23F3A741F2AEFD07A2081"))
	c.Assert(m.DsaKey.G, DeepEquals, bnFromHex("535E360E8A95EBA46A4F7DE50AD6E9B2A6DB785A66B64EB9F20338D2A3E8FB0E94725848F1AA6CC567CB83A1CC517EC806F2E92EAE71457E80B2210A189B91250779434B41FC8A8873F6DB94BEA7D177F5D59E7E114EE10A49CFD9CEF88AE43387023B672927BA74B04EB6BBB5E57597766A2F9CE3857D7ACE3E1E3BC1FC6F26"))
	c.Assert(m.DsaKey.Y, DeepEquals, bnFromHex("0AC8670AD767D7A8D9D14CC1AC6744CD7D76F993B77FFD9E39DF01E5A6536EF65E775FCEF2A983E2A19BD6415500F6979715D9FD1257E1FE2B6F5E1E74B333079E7C880D39868462A93454B41877BE62E5EF0A041C2EE9C9E76BD1E12AE25D9628DECB097025DD625EF49C3258A1A3C0FF501E3DC673B76D7BABF349009B6ECF"))
	c.Assert(m.TransitionalSignature, DeepEquals, []byte{
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x11, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x21, 0x02, 0x03, 0x54, 0x05, 0x06, 0x07, 0x08,
		0x31, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x41, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
	})
	c.Assert(m.Sig, DeepEquals, &EddsaSignature{
		s: [114]byte{0x15, 0x00, 0x00, 0x00, 0x12},
	})
}

func (s *GotraxSuite) Test_clientProfile_deserialize_shouldFailOnFieldLength(c *C) {
	m := &ClientProfile{}
	_, ok := m.Deserialize([]byte{
		0x0, 0x0, 0x0,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_clientProfile_deserialize_shouldFailOnSignature(c *C) {
	m := &ClientProfile{}
	_, ok := m.Deserialize([]byte{
		0x0, 0x0, 0x0, 0x0,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_clientProfile_deserialize_shouldFailOnFieldIdentifier(c *C) {
	m := &ClientProfile{}
	_, ok := m.Deserialize([]byte{
		0x0, 0x0, 0x0, 0x1,

		0x0,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_clientProfile_deserialize_shouldFailOnUnknownFieldIdentifier(c *C) {
	m := &ClientProfile{}
	_, ok := m.Deserialize([]byte{
		0x0, 0x0, 0x0, 0x1,

		0x0, 42,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_clientProfile_deserialize_shouldFailOnInstanceTag(c *C) {
	m := &ClientProfile{}
	_, ok := m.Deserialize([]byte{
		0x0, 0x0, 0x0, 0x1,

		// instance tag
		0x0, 0x1, 0x42,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_clientProfile_deserialize_shouldFailOnPublicKey(c *C) {
	m := &ClientProfile{}
	_, ok := m.Deserialize([]byte{
		0x0, 0x0, 0x0, 0x1,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_clientProfile_deserialize_shouldFailOnVersions(c *C) {
	m := &ClientProfile{}
	_, ok := m.Deserialize([]byte{
		0x0, 0x0, 0x0, 0x1,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x04,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_clientProfile_deserialize_shouldFailOnExpiry(c *C) {
	m := &ClientProfile{}
	_, ok := m.Deserialize([]byte{
		0x0, 0x0, 0x0, 0x1,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_clientProfile_deserialize_shouldFailOnDSAPublicKey(c *C) {
	m := &ClientProfile{}
	_, ok := m.Deserialize([]byte{
		0x0, 0x0, 0x0, 0x1,

		// dsa public key
		0x00, 0x06,

		0x00, 0x00,

		0x0, 0x0, 0x0, 0x80,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_clientProfile_deserialize_shouldFailOnTransitionalSignature(c *C) {
	m := &ClientProfile{}
	_, ok := m.Deserialize([]byte{
		0x0, 0x0, 0x0, 0x1,

		// transitional signature
		0x00, 0x08,
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x11, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x21, 0x02, 0x03, 0x54, 0x05, 0x06, 0x07, 0x08,
	})

	c.Assert(ok, Equals, false)
}
