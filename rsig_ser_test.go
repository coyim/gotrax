package gotrax

import (
	. "gopkg.in/check.v1"
)

func (s *GotraxSuite) Test_ringSignature_serialize_should_work(c *C) {
	msg := []byte("hi")
	p1 := DeriveKeypair([SymKeyLength]byte{0x0A})
	p2 := DeriveKeypair([SymKeyLength]byte{0x19})
	p3 := DeriveKeypair([SymKeyLength]byte{0x2A})
	rsig, _ := GenerateSignature(ReaderIntoWithRandom(FixtureRand()), p1.Priv, p1.Pub, p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth)
	res := rsig.Serialize()

	c.Assert(res, DeepEquals, []byte{
		0x61, 0x31, 0x1a, 0xe4, 0xb6, 0xf9, 0x94, 0x28, 0xcf, 0x14, 0x82, 0x79, 0x19, 0x03, 0xaf, 0x26, 0xe7, 0xe2, 0xf4, 0xbe, 0x60, 0x9c, 0x18, 0x9b, 0x59, 0x58, 0x36, 0xa7, 0x27, 0xb9, 0xc4, 0x84, 0x53, 0x8b, 0x28, 0x44, 0x96, 0x8b, 0x50, 0xdd, 0xce, 0x40, 0xb9, 0x1f, 0xea, 0x1b, 0x92, 0x01, 0x32, 0xa5, 0x5c, 0x1a, 0xa8, 0x99, 0x14, 0x32, 0x6d, 0x25, 0x33, 0x1f, 0xe0, 0x96, 0xea, 0x99, 0xb8, 0x62, 0x30, 0xd3, 0xf7, 0x02, 0xec, 0x4e, 0x47, 0x88, 0xe8, 0xf1, 0x27, 0x4a, 0xfa, 0x90, 0x52, 0x43, 0x01, 0xf6, 0x7e, 0xe2, 0x42, 0x25, 0xc2, 0xcf, 0x12, 0x4e, 0x4f, 0x39, 0xc3, 0xf8, 0xcd, 0xb2, 0x64, 0x48, 0xd0, 0x34, 0x5f, 0x8b, 0xff, 0x0e, 0xb5, 0xa9, 0xa3, 0x62, 0xd1, 0x16, 0x3e, 0x4f, 0x9a, 0xe1, 0x98, 0x28, 0x67, 0x86, 0xf1, 0xba, 0x33, 0x60, 0x31, 0x54, 0x50, 0x49, 0x05, 0xfa, 0xc0, 0x93, 0xf5, 0x5d, 0x64, 0xca, 0x22, 0x8d, 0x27, 0x22, 0x6c, 0xf6, 0x59, 0xd9, 0xb3, 0x31, 0x31, 0x73, 0x10, 0xb4, 0x6e, 0xc6, 0x17, 0xba, 0x5f, 0x91, 0xdd, 0x31, 0xb5, 0x09, 0x83, 0x01, 0x51, 0x7c, 0x08, 0x2e, 0x1c, 0x33, 0x47, 0x71, 0x5b, 0x81, 0xa8, 0x56, 0x47, 0x16, 0x05, 0x8f, 0x9a, 0x2e, 0x9b, 0x2c, 0x55, 0xc3, 0xd7, 0x00, 0xd3, 0x26, 0x13, 0xf5, 0x93, 0xe4, 0xf4, 0xcb, 0x98, 0xb7, 0xe7, 0x81, 0x0d, 0x35, 0xa7, 0xa5, 0x59, 0x74, 0x9b, 0x7d, 0x19, 0x63, 0x20, 0x5c, 0x01, 0x3b, 0x79, 0x70, 0x35, 0x33, 0xfa, 0x1f, 0x38, 0xe3, 0x81, 0x96, 0x78, 0x2e, 0xee, 0x85, 0xfb, 0x2b, 0xf0, 0x15, 0x11, 0x74, 0x0f, 0x82, 0x42, 0x15, 0x7f, 0x93, 0xac, 0xd3, 0x3a, 0x5d, 0x03, 0x80, 0xde, 0x08, 0x20, 0xd0, 0x4b, 0x90, 0xd4, 0x7b, 0x73, 0xc5, 0x60, 0xac, 0x4c, 0x25, 0x1e, 0x19, 0x37, 0xbf, 0x64, 0x2c, 0xc8, 0xec, 0xab, 0xa2, 0x26, 0x95, 0x11, 0xff, 0x19, 0x15, 0x3d, 0x6e, 0x47, 0xfe, 0x66, 0x33, 0xc1, 0xa2, 0x98, 0x31, 0xf8, 0x8b, 0x0e, 0xc4, 0xd3, 0x73, 0xf8, 0x87, 0x04, 0xc7, 0x94, 0x20, 0x44, 0x71, 0x5e, 0xe9, 0xb5, 0x6f, 0x85, 0x1b, 0x86, 0x45, 0x79, 0xca, 0xea, 0x94, 0x2d, 0xe0, 0xbb, 0xc2, 0xb1, 0x2e, 0x7e, 0xdd, 0xed, 0xb5, 0xee, 0x6d, 0x62, 0x1f, 0x04, 0xb3, 0xb2, 0xfb, 0x2e, 0x0c, 0x86, 0xff, 0xd6, 0x2f, 0xfc, 0x24,
	})
}

func (s *GotraxSuite) Test_ringSignature_deserialize_shouldWorkCorrectly(c *C) {
	msg := []byte("hi")
	p1 := DeriveKeypair([SymKeyLength]byte{0x0A})
	p2 := DeriveKeypair([SymKeyLength]byte{0x19})
	p3 := DeriveKeypair([SymKeyLength]byte{0x2A})
	rsig, _ := GenerateSignature(ReaderIntoWithRandom(FixtureRand()), p1.Priv, p1.Pub, p1.Pub, p2.Pub, p3.Pub, msg, KdfPrekeyServer, usageAuth)

	m := &RingSignature{}
	_, ok := m.Deserialize([]byte{
		0x61, 0x31, 0x1a, 0xe4, 0xb6, 0xf9, 0x94, 0x28, 0xcf, 0x14, 0x82, 0x79, 0x19, 0x03, 0xaf, 0x26, 0xe7, 0xe2, 0xf4, 0xbe, 0x60, 0x9c, 0x18, 0x9b, 0x59, 0x58, 0x36, 0xa7, 0x27, 0xb9, 0xc4, 0x84, 0x53, 0x8b, 0x28, 0x44, 0x96, 0x8b, 0x50, 0xdd, 0xce, 0x40, 0xb9, 0x1f, 0xea, 0x1b, 0x92, 0x01, 0x32, 0xa5, 0x5c, 0x1a, 0xa8, 0x99, 0x14, 0x32, 0x6d, 0x25, 0x33, 0x1f, 0xe0, 0x96, 0xea, 0x99, 0xb8, 0x62, 0x30, 0xd3, 0xf7, 0x02, 0xec, 0x4e, 0x47, 0x88, 0xe8, 0xf1, 0x27, 0x4a, 0xfa, 0x90, 0x52, 0x43, 0x01, 0xf6, 0x7e, 0xe2, 0x42, 0x25, 0xc2, 0xcf, 0x12, 0x4e, 0x4f, 0x39, 0xc3, 0xf8, 0xcd, 0xb2, 0x64, 0x48, 0xd0, 0x34, 0x5f, 0x8b, 0xff, 0x0e, 0xb5, 0xa9, 0xa3, 0x62, 0xd1, 0x16, 0x3e, 0x4f, 0x9a, 0xe1, 0x98, 0x28, 0x67, 0x86, 0xf1, 0xba, 0x33, 0x60, 0x31, 0x54, 0x50, 0x49, 0x05, 0xfa, 0xc0, 0x93, 0xf5, 0x5d, 0x64, 0xca, 0x22, 0x8d, 0x27, 0x22, 0x6c, 0xf6, 0x59, 0xd9, 0xb3, 0x31, 0x31, 0x73, 0x10, 0xb4, 0x6e, 0xc6, 0x17, 0xba, 0x5f, 0x91, 0xdd, 0x31, 0xb5, 0x09, 0x83, 0x01, 0x51, 0x7c, 0x08, 0x2e, 0x1c, 0x33, 0x47, 0x71, 0x5b, 0x81, 0xa8, 0x56, 0x47, 0x16, 0x05, 0x8f, 0x9a, 0x2e, 0x9b, 0x2c, 0x55, 0xc3, 0xd7, 0x00, 0xd3, 0x26, 0x13, 0xf5, 0x93, 0xe4, 0xf4, 0xcb, 0x98, 0xb7, 0xe7, 0x81, 0x0d, 0x35, 0xa7, 0xa5, 0x59, 0x74, 0x9b, 0x7d, 0x19, 0x63, 0x20, 0x5c, 0x01, 0x3b, 0x79, 0x70, 0x35, 0x33, 0xfa, 0x1f, 0x38, 0xe3, 0x81, 0x96, 0x78, 0x2e, 0xee, 0x85, 0xfb, 0x2b, 0xf0, 0x15, 0x11, 0x74, 0x0f, 0x82, 0x42, 0x15, 0x7f, 0x93, 0xac, 0xd3, 0x3a, 0x5d, 0x03, 0x80, 0xde, 0x08, 0x20, 0xd0, 0x4b, 0x90, 0xd4, 0x7b, 0x73, 0xc5, 0x60, 0xac, 0x4c, 0x25, 0x1e, 0x19, 0x37, 0xbf, 0x64, 0x2c, 0xc8, 0xec, 0xab, 0xa2, 0x26, 0x95, 0x11, 0xff, 0x19, 0x15, 0x3d, 0x6e, 0x47, 0xfe, 0x66, 0x33, 0xc1, 0xa2, 0x98, 0x31, 0xf8, 0x8b, 0x0e, 0xc4, 0xd3, 0x73, 0xf8, 0x87, 0x04, 0xc7, 0x94, 0x20, 0x44, 0x71, 0x5e, 0xe9, 0xb5, 0x6f, 0x85, 0x1b, 0x86, 0x45, 0x79, 0xca, 0xea, 0x94, 0x2d, 0xe0, 0xbb, 0xc2, 0xb1, 0x2e, 0x7e, 0xdd, 0xed, 0xb5, 0xee, 0x6d, 0x62, 0x1f, 0x04, 0xb3, 0xb2, 0xfb, 0x2e, 0x0c, 0x86, 0xff, 0xd6, 0x2f, 0xfc, 0x24})

	c.Assert(ok, Equals, true)
	c.Assert(rsig.C1, DeepEquals, m.C1)
	c.Assert(rsig.R1, DeepEquals, m.R1)
	c.Assert(rsig.C2, DeepEquals, m.C2)
	c.Assert(rsig.R2, DeepEquals, m.R2)
	c.Assert(rsig.C3, DeepEquals, m.C3)
	c.Assert(rsig.R3, DeepEquals, m.R3)
}

func (s *GotraxSuite) Test_ringSignature_deserialize_shouldFailOnMissing_c1(c *C) {
	m := &RingSignature{}
	_, ok := m.Deserialize([]byte{
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_ringSignature_deserialize_shouldFailOnMissing_r1(c *C) {
	m := &RingSignature{}
	_, ok := m.Deserialize([]byte{
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_ringSignature_deserialize_shouldFailOnMissing_c2(c *C) {
	m := &RingSignature{}
	_, ok := m.Deserialize([]byte{
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_ringSignature_deserialize_shouldFailOnMissing_r2(c *C) {
	m := &RingSignature{}
	_, ok := m.Deserialize([]byte{
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_ringSignature_deserialize_shouldFailOnMissing_c3(c *C) {
	m := &RingSignature{}
	_, ok := m.Deserialize([]byte{
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GotraxSuite) Test_ringSignature_deserialize_shouldFailOnMissing_r3(c *C) {
	m := &RingSignature{}
	_, ok := m.Deserialize([]byte{
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	})

	c.Assert(ok, Equals, false)
}
